package com.pm.sessionservice.Mapper;

import com.pm.sessionservice.DTO.*;
import com.pm.sessionservice.model.Session;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.NullValuePropertyMappingStrategy;

/**
 * SessionMapper using MapStruct for automatic DTO <-> Entity mapping
 * 
 * Features:
 * - Automatic field mapping by name
 * - Custom mappings for field name differences
 * - Null-safe operations
 * - Spring component integration
 */
@Mapper(
    componentModel = "spring",
    nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE
)
public interface SessionMapper {

    /**
     * Maps Session entity to SessionResponseDTO
     * Includes all session fields for complete client response
     */
    @Mapping(target = "userIds", source = "taskIds") // Map taskIds to userIds for backward compatibility
    @Mapping(target = "participantIds", ignore = true) // Will be populated by service layer
    SessionResponseDTO toResponseDTO(Session session);

    /**
     * Maps Session entity to SessionSummaryDTO 
     * Contains only essential fields for list views
     */
    SessionSummaryDTO toSummaryDTO(Session session);

    /**
     * Maps SessionRequestDTO to Session entity
     * Ignores auto-generated and runtime fields
     */
    @Mapping(target = "sessionId", ignore = true) // Auto-generated
    @Mapping(target = "createdAt", ignore = true) // Set by service
    @Mapping(target = "updatedAt", ignore = true) // Set by service
    @Mapping(target = "startTime", ignore = true) // Set by service
    @Mapping(target = "endTime", ignore = true) // Set by service
    @Mapping(target = "status", ignore = true) // Set by service
    @Mapping(target = "inviteCode", ignore = true) // Generated by service
    @Mapping(target = "currentType", ignore = true) // Set by service
    @Mapping(target = "currentPhaseStartTime", ignore = true) // Set by service
    @Mapping(target = "currentDurationMinutes", ignore = true) // Set by service
    @Mapping(target = "totalWorkSessionsCompleted", ignore = true) // Runtime field
    @Mapping(target = "currentParticipantCount", ignore = true) // Runtime field
    @Mapping(target = "isDeleted", ignore = true) // Runtime field
    @Mapping(target = "totalSessionDurationMinutes", ignore = true) // Calculated field
    @Mapping(target = "taskIds", ignore = true) // Initialized empty by service
    @Mapping(target = "ownerUsername", ignore = true) // Set by service from userId
    Session fromRequestDTO(SessionRequestDTO sessionRequestDTO);

    /**
     * Updates existing Session entity with values from UpdateSessionRequestDTO
     * Only non-null values are updated (IGNORE strategy)
     */
    @Mapping(target = "sessionId", ignore = true) // Never update ID
    @Mapping(target = "ownerUsername", ignore = true) // Never change owner
    @Mapping(target = "createdAt", ignore = true) // Never change creation time
    @Mapping(target = "status", ignore = true) // Managed by service
    @Mapping(target = "inviteCode", ignore = true) // Never auto-update
    @Mapping(target = "currentType", ignore = true) // Managed by pomodoro logic
    @Mapping(target = "currentPhaseStartTime", ignore = true) // Managed by pomodoro logic
    @Mapping(target = "currentDurationMinutes", ignore = true) // Managed by pomodoro logic
    @Mapping(target = "totalWorkSessionsCompleted", ignore = true) // Runtime field
    @Mapping(target = "currentParticipantCount", ignore = true) // Runtime field
    @Mapping(target = "isDeleted", ignore = true) // Managed by service
    @Mapping(target = "totalSessionDurationMinutes", ignore = true) // Calculated field
    @Mapping(target = "taskIds", ignore = true) // Managed separately
    void updateSessionFromRequest(UpdateSessionRequestDTO updateRequest, @MappingTarget Session session);

    /**
     * Maps Session entity to SessionProgressDTO for real-time progress tracking
     * Includes all fields needed for comprehensive progress display
     */
    @Mapping(target = "elapsedTime", ignore = true) // Calculated by service using helper methods
    @Mapping(target = "timeRemainingInPhase", ignore = true) // Calculated by service using helper methods
    @Mapping(target = "totalTasks", ignore = true) // Calculated from taskIds list by service
    @Mapping(target = "tasksCompleted", ignore = true) // Calculated by service via task service integration
    @Mapping(target = "activeParticipants", ignore = true) // Retrieved by service from participant repository
    @Mapping(target = "completedTaskIds", ignore = true) // Retrieved by service via task service integration
    @Mapping(target = "isWaitingForBreakSelection", ignore = true) // Calculated by service using helper methods
    SessionProgressDTO toProgressDTO(Session session);

    /**
     * Maps Session entity to BreakSessionDTO for break selection interface
     * Includes break options and current session state
     */
    @Mapping(target = "phaseStartTime", source = "currentPhaseStartTime") // Field name mapping
    @Mapping(target = "workSessionsCompleted", source = "totalWorkSessionsCompleted") // Field name mapping  
    @Mapping(target = "tasks", ignore = true) // Calculated from taskIds list by service
    @Mapping(target = "timeRemaining", ignore = true) // Calculated by service using helper methods
    BreakSessionDTO toBreakSessionDTO(Session session);
}
